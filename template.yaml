AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  python3.9
  SAM template for a Discord Bot with multiple components.

Globals:
  Function:
    Timeout: 3
    Tags:
      owner: discordSamApi

Parameters:
  ApiDomainName:
    Type: String
    Description: The Domain name that your API will use.
  CertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /discord/discordStarCert
    Description: The * certificate for your API.  This should be made beforehand.
  SlashBotPublicKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /discord/discordApiBotPublicKey
    Description: The public key for your Discord bot.
  SlashBotAppId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /discord/slashBotAppId
    Description: The Application ID for your discord bot.
  Route53HostedZone:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /globals/supergoonRoute53HostedZoneId
    Description: The route53 hosted zone where your record will be created.
  GetValuesFromTableLambdaName:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /jrpg/getVoteValuesLambdaArn
    Description: The function to get values from the DynamoDB table.

Resources:
  DiscordApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: DiscordApiGateway
      StageName: Prod
      Description: "The discord front end that discord will reach out to for authentication and when looking for bot responses."
      Domain: 
        CertificateArn: !Ref CertificateArn
        DomainName: !Ref ApiDomainName
        Route53:
          HostedZoneId: !Ref Route53HostedZone
          EvaluateTargetHealth: true

  DiscordSlashBot:
    Type: AWS::Serverless::Function 
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          BOTPUBLICKEY: !Ref SlashBotPublicKey
          COMMANDAPIARN: !Ref DiscordSlashBotCommands
      Events:
        ApiPost:
          Type: Api 
          Properties:
            Path: /api
            Method: post
            RestApiId:
              Ref: DiscordApiGateway
      Policies: 
        - LambdaInvokePolicy:
            FunctionName: !Ref DiscordSlashBotCommands
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./slashbotLambda
      DockerTag: python3.9-v1
  DiscordSlashBotCommands:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          GETVOTESLAMBDAARN: !Ref GetValuesFromTableLambdaName
          SLASHBOTAPPID: !Ref SlashBotAppId
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GetValuesFromTableLambdaName
    Metadata:
      Dockerfile: Dockerfile
      DockerContext: ./slashbotCommandsLambda
      DockerTag: python3.9-v1

Outputs:
  DiscordApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage without the r53 record"
    Value: !Sub "https://${DiscordApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/"